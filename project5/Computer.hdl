// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Computer.hdl
/**
 * The Hack computer, consisting of CPU, ROM and RAM.
 * When reset = 0, the program stored in the ROM executes.
 * When reset = 1, the program's execution restarts. 
 * Thus, to start running the currently loaded program,
 * set reset to 1, and then set it to 0. 
 * From this point onwards, the user is at the mercy of the software.
 * Depending on the program's code, and whether the code is correct,
 * the screen may show some output, the user may be expected to enter
 * some input using the keyboard, or the program may do some procerssing. 
 */
CHIP Computer {
    IN reset; // Reset signal to reinitialize the computer

    PARTS:
    // ROM32K: Reads an instruction from the address provided by the program counter (PC)
    ROM32K(address=programCounter, out=currentInstruction);

    // CPU: Processes instructions, handles data operations and updates the program counter
    CPU(
        inM=dataFromMemory, // Data input from Memory (used when instruction involves reading memory)
        instruction=currentInstruction, // Instruction fetched from ROM
        reset=reset, // Reset signal passed to CPU
        outM=dataToMemory, // Data output to Memory (used when instruction involves writing to memory)
        writeM=memoryWriteEnable, // Control signal to enable writing to Memory
        addressM=memoryAddress, // Address for Memory read/write operations
        pc=programCounter // Program counter that points to the next instruction in ROM
    );

    // Memory: Manages RAM and memory-mapped I/O, reads/writes data based on CPU signals
    Memory(
        in=dataToMemory, // Data from CPU to be written to Memory
        load=memoryWriteEnable, // Enable signal for writing data to Memory
        address=memoryAddress, // Address in Memory where data should be read/written
        out=dataFromMemory // Data read from Memory provided to CPU
    );
}
