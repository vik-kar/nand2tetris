// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /*
        A-instruction (0 opcode)
        if value = number, A register contents are set to the value
        if value = symbol, A register contents set to the value that the symbol points to

        C-instruction (1 opcode)
        dest = comp;jump
    */
    Not(in= instruction[15], out= AIns);
    Not(in= AIns, out= CIns);

    And(a= CIns, b= instruction[5], out= ALUtoA);
    Mux16(a= instruction, b= ALUout, sel= ALUtoA, out= Aregin);

    //Add value to A register depending on loadbit
    Or(a= AIns, b= ALUtoA, out= loadA);
    ARegister(in= Aregin, load= loadA, out= Aout);

    //Bit 12 determines A or M register
    Mux16(a= Aout, b= inM, sel= instruction[12], out= AMout);

    And(a= CIns, b= instruction[4], out= loadD);
    DRegister(in= ALUout, load= loadD, out= Dout);

    //ALU computations
    ALU(x= Dout, y= AMout, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= ALUout, zr= ZRout, ng= NGout);

    //CPU writing to data memory
    Or16(a= false, b= Aout, out[0..14]= addressM);
    //content in the data memory
    Or16(a= false, b= ALUout, out= outM);

    //write to memory
    And(a=CIns, b=instruction[3], out=writeM);

    //jumps
    And(a= ZRout, b= instruction[1], out= jeq);
    And(a= NGout, b= instruction[2], out= jlt);
    Or(a= ZRout, b= NGout, out= zeroOrNeg);
    Not(in= zeroOrNeg, out= positive);
    And(a=positive, b=instruction[0], out=jgt);
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jumpToA);
    And(a=CIns, b=jumpToA, out=PCload);
    Not(in=PCload, out=PCinc);
    PC(in=Aout, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);	
}
