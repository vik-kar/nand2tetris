// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //Calculate x and y zero'd and negated, then use mux
    Not16(in= x, out= xNot);
    //Not16(in= xNot, out= copyX);
    Add16(a = x, b = xNot, out = xAllOnes);
    Not16(in= xAllOnes, out= xAllZeroes);

    //we can use the x variables allOne and allZero for y
    /**
    * 16-bit multiplexor: 
    * for i = 0, ..., 15:
    * if (sel = 0) out[i] = a[i], else out[i] = b[i]
    */
    //zero the x and/or negate the x
    Mux16(a= x, b= xAllZeroes, sel= zx, out= tempX);
    //negate tempX
    Not16(in= tempX, out= tempXNot);
    Mux16(a= tempX, b= tempXNot, sel= nx, out= xFinal);

    //Now, for Y
    Not16(in= y, out= yNot);
    //zero the y and/or negate the y
    Mux16(a= y, b= xAllZeroes, sel= zy, out= tempY);
    //negate tempY
    Not16(in= tempY, out= tempYNot);
    Mux16(a= tempY, b= tempYNot, sel= ny, out= yFinal);

    Add16(a = xFinal, b = yFinal, out = XYSum); //x + y
    And16(a= xFinal, b= yFinal, out= XAndY); // x& y
    Mux16(a= XAndY, b= XYSum, sel= f, out= fOutput);

    //no
    //if (no == 1) sets out = !out
    Not16(in= fOutput, out= notFOutput);
    Mux16(a= fOutput, b= notFOutput, sel= no, out= out, out=tempOut, out[15]=msb,
          out[0] = out0, out[1] = out1, out[2] = out2, out[3] = out3,
          out[4] = out4, out[5] = out5, out[6] = out6, out[7] = out7,
          out[8] = out8, out[9] = out9, out[10] = out10, out[11] = out11,
          out[12] = out12, out[13] = out13, out[14] = out14, out[15] = out15);

    //rz bit
    Or(a= out0, b= out1, out= o1);
    Or(a= o1, b= out2, out= o2);
    Or(a= o2, b= out3, out= o3);
    Or(a= o3, b= out4, out= o4);
    Or(a= o4, b= out5, out= o5);
    Or(a= o5, b= out6, out= o6);
    Or(a= o6, b= out7, out= o7);
    Or(a= o7, b= out8, out= o8);
    Or(a= o8, b= out9, out= o9);
    Or(a= o9, b= out10, out= o10);
    Or(a= o10, b= out11, out= o11);
    Or(a= o11, b= out12, out= o12);
    Or(a= o12, b= out13, out= o13);
    Or(a= o13, b= out14, out= o14);
    Or(a= o14, b= out15, out= o15);

    Mux(a= true, b= false, sel= o15, out= zr);



    //ng bit - 2s complement, so look at MSB
    And(a = msb, b = msb, out= ngAnd);
    //Not(in= zrAnd, out= zrAndNot);
    Mux(a= false, b= true, sel= ngAnd, out= ng);
}